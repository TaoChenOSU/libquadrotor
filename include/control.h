#pragma once

#include "cmath3d/math3d.h"
#include "common_types.h"


// in both position and attitude of a quadrotor, the third axis is "special".
// for PID controller parameters, we generally want the same value for x and y
// and a different value for z.
struct xy_z {
	float xy;
	float z;
};

// based on the paper: Daniel Mellinger, Vijay Kumar:
// Minimum snap trajectory generation and control for quadrotors.
// IEEE International Conference on Robotics and Automation (ICRA), 2011.
struct ctrl_SE3_params
{
	struct {
		struct xy_z kp;
		struct xy_z ki;
		struct xy_z kd;
	} linear;

	struct {
		struct xy_z kp;
		struct xy_z ki;
		// TODO: implement lowpass filter for reliable d term on attitude rate
		// xy_z d;
	} omega;

	struct {
		struct xy_z kp;
	} attitude;

	struct vec int_linear_bound;
	struct vec int_omega_bound;
};

struct ctrl_SE3_state
{
	struct vec int_linear_err;
	struct vec int_omega_err;
};

void ctrl_SE3_default_params(struct ctrl_SE3_params *params);

void init_ctrl_SE3(struct ctrl_SE3_state *state);

struct accel ctrl_SE3(
	struct ctrl_SE3_state *state,
	struct ctrl_SE3_params const *param,
	struct quad_state const *s, struct quad_state const *set, float dt);

//
// Attitude rate control, aka "acrobatic mode" for human pilots
//
struct ctrl_attitude_rate_params
{
	struct xy_z kp;
	struct xy_z ki;
	// TODO: implement lowpass filter for reliable d term on attitude rate
	// struct vec kd;

	struct vec int_omega_bound;
};

struct ctrl_attitude_rate_state
{
	struct vec int_omega_err;
};

// compute the force to be generated by each propeller.
// output is prop_forces in newtons (kg * m/s^2)
void power_distribute_quad(
	struct accel const *acc,
	struct quad_physical_params const *params,
	float prop_forces[4]);

